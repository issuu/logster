#!/bin/bash

SCRIPT_NAME=$(basename $0)

function log() {
    facility=local1
    level=${2:-info}
    /usr/bin/logger -p ${facility}.${level} -t ${SCRIPT_NAME} "${1}"
}

# run this script with a lock
[ "${FLOCKER}" != "$0" ] && exec env FLOCKER="$0" flock -en "$0" "$0" "$@" || :

LOCKFILE=/var/run/logtail-logster.parsers.HaProxyLogster.HaProxyLogster-var-log-haproxy.log.lock
STATEFILE=/var/run/logtail-logster.parsers.HaProxyLogster.HaProxyLogster-var-log-haproxy.log.state

function on_exit() {
    log "Exiting ..."
    # if for some reason we did not shutdown in a clean way
    [ -e "${LOCKFILE}"  ] && rm -f ${LOCKFILE}
    exit 0
}
trap on_exit EXIT HUP INT QUIT TERM

# pull this from the default file
unset GRAPHITE_HOST_PORT
unset STATSD_HOST_PORT
unset HAPROXY_SOCKET
unset REQUEST_HEADERS
unset ISSUU
unset MAGMA
unset USE_XFF_AS_CLIENTIP

test -f /etc/default/logster-haproxy-graphite && . /etc/default/logster-haproxy-graphite

if [ \( -z "${GRAPHITE_HOST_PORT}" -a -z "${STATSD_HOST_PORT}" \) ]; then
    echo 'Please set either ${GRAPHITE_HOST_PORT} or ${STATSD_HOST_PORT}'
    echo 'See /etc/default/logster-haproxy-graphite'
    exit 1
fi

unset HAPROXY_OPTION
if [ -n "${HAPROXY_SOCKET}" ]; then
    HAPROXY_OPTION=" --socket ${HAPROXY_SOCKET}"
fi

unset REQUEST_HEADERS_OPTION
if [ -n "${REQUEST_HEADERS}" ]; then
    REQUEST_HEADERS_OPTION=" --headers ${REQUEST_HEADERS}"
fi

unset ISSUU_OPTION
if [ -n "${ISSUU}" ]; then
    ISSUU_OPTION=" --issuu"
fi

unset MAGMA_OPTION
if [ -n "${MAGMA}" ]; then
    MAGMA_OPTION=" --magma"
fi

unset USE_XFF_AS_CLIENTIP_OPTION
if [ -n "${USE_XFF_AS_CLIENTIP}" ]; then
    USE_XFF_AS_CLIENTIP_OPTION=" --xffip"
fi

unset VERIFYBOT_OPTION
if [ -n "${VERIFYBOT}" ]; then
    VERIFYBOT_OPTION=" --verifybot ${VERIFYBOT}"
fi

unset VARIANCETHRESHOLD_OPTION
if [ -n "${VARIANCETHRESHOLD}" ]; then
    VARIANCETHRESHOLD_OPTION=" --variancethreshold ${VARIANCETHRESHOLD}"
fi

LOGDIR=/var/log/logster/
test -d ${LOGDIR} || mkdir -p ${LOGDIR}

function do_work () {
    log "running logster ...."

    if [ -e /var/tmp/haproxy_logster_cleancache ]; then
        log "cleaning cache files ..."
        rm -f /var/tmp/haproxy_logster_*.p /var/tmp/haproxy_logster_cleancache
    fi

    if [ -n "${STATSD_HOST_PORT}" ]; then
        timeout --kill-after=115 110 logster --output statsd \
            --statsd-host ${STATSD_HOST_PORT} \
            --parser-options "${HAPROXY_OPTION}${REQUEST_HEADERS_OPTION}${ISSUU_OPTION}${MAGMA_OPTION}${USE_XFF_AS_CLIENTIP_OPTION}${VERIFYBOT_OPTION}${VARIANCETHRESHOLD_OPTION}" \
            HaProxyLogster \
            /var/log/haproxy.log || { log "Cmd timeout, removing state and lock file."; rm -f ${STATEFILE}; rm -f ${LOCKFILE}; }
    else
        timeout --kill-after=115 110 logster --output graphite \
            --graphite-host ${GRAPHITE_HOST_PORT} \
            --parser-options "${HAPROXY_OPTION}${REQUEST_HEADERS_OPTION}${ISSUU_OPTION}${MAGMA_OPTION}${USE_XFF_AS_CLIENTIP_OPTION}${VERIFYBOT_OPTION}${VARIANCETHRESHOLD_OPTION}" \
            HaProxyLogster \
            /var/log/haproxy.log || { log "Cmd timeout, removing state and lockfile."; rm -f ${STATEFILE}; rm -f ${LOCKFILE}; }
    fi
}

# Check if another is already running - this should not happen
while [ -e "${LOCKFILE}" ]; do
    A=$(stat --format=%Y ${LOCKFILE})
    B=$(date +%s)
    D=$(expr $B - $A)
    log "waiting for logster lockfile .... ${D} secs old"
    if [ ${D:-0} -gt 120 ]; then
        log "killing running logster process and cleaning up lockfile and statefile"
        pkill -9 -f 'perl.*logtail2'; sleep 2
        pkill -9 -f 'python.*logster'; sleep 1
        [ -e "${STATEFILE}" ] && rm -f ${STATEFILE}
        [ -e "${LOCKFILE}"  ] && rm -f ${LOCKFILE}
        # fallthru
    else
        sleep 5
    fi
done

i=1
A=$(date +%s)
do_work
B=$(date +%s)
D=$(expr $B - $A)
log "${i}. work done in $D seconds."
while [ ${D:-0} -gt 45 -a ${D:-0} -lt 60 ]; do
    i=$(expr $i + 1)
    # wait a up to 15 secs to process more log lines - with a bit of luck this should make us fail less
    Z=$(expr 15 - 60 + ${D})
    log "running a ${i}. time in ${Z} seconds"
    sleep ${Z:-10}
    A=$(date +%s)
    do_work
    B=$(date +%s)
    D=$(expr $B - $A)
    log "${i}. work done in $D seconds."
done

exit 0

